
ice40UL_Programming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000298c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ba8  08002ba8  0002794c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ba8  08002ba8  00012ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bb0  08002bb0  0002794c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000794c  20000000  08002bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000794c  0800a504  0002794c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007b14  0800a504  00027b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002794c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002797c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000606b  00000000  00000000  000279bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000153d  00000000  00000000  0002da2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002ef68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016361  00000000  00000000  0002f640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d40  00000000  00000000  000459a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008717f  00000000  00000000  0004d6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000508  00000000  00000000  000d4860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002074  00000000  00000000  000d4d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d6ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000794c 	.word	0x2000794c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002b0c 	.word	0x08002b0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20007950 	.word	0x20007950
 80001d4:	08002b0c 	.word	0x08002b0c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fc2b 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f88b 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f91f 	bl	8000724 <MX_GPIO_Init>
  MX_SPI4_Init();
 80004e6:	f000 f8e7 	bl	80006b8 <MX_SPI4_Init>
  {
	  //PE11 is CRESETB
	  //PE15 is CS
	  //PE10 start programming pin

	  uint8_t tx_data[1] = {0xFF};
 80004ea:	23ff      	movs	r3, #255	; 0xff
 80004ec:	703b      	strb	r3, [r7, #0]
	  GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10);
 80004ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f2:	483a      	ldr	r0, [pc, #232]	; (80005dc <main+0x108>)
 80004f4:	f000 ff1e 	bl	8001334 <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	70fb      	strb	r3, [r7, #3]
	  if (pinState==GPIO_PIN_SET){
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d160      	bne.n	80005c4 <main+0xf0>
		  printf("ice40 Programming is On-going....\n");
 8000502:	4837      	ldr	r0, [pc, #220]	; (80005e0 <main+0x10c>)
 8000504:	f001 ff6c 	bl	80023e0 <puts>
		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050e:	4833      	ldr	r0, [pc, #204]	; (80005dc <main+0x108>)
 8000510:	f000 ff28 	bl	8001364 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051a:	4830      	ldr	r0, [pc, #192]	; (80005dc <main+0x108>)
 800051c:	f000 ff22 	bl	8001364 <HAL_GPIO_WritePin>
		   HAL_Delay(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fc79 	bl	8000e18 <HAL_Delay>
		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);// pull CRESET low
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800052c:	482b      	ldr	r0, [pc, #172]	; (80005dc <main+0x108>)
 800052e:	f000 ff19 	bl	8001364 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);// pull CS low
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000538:	4828      	ldr	r0, [pc, #160]	; (80005dc <main+0x108>)
 800053a:	f000 ff13 	bl	8001364 <HAL_GPIO_WritePin>
		   HAL_Delay(1);
 800053e:	2001      	movs	r0, #1
 8000540:	f000 fc6a 	bl	8000e18 <HAL_Delay>
		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);// pull CRESET high
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054a:	4824      	ldr	r0, [pc, #144]	; (80005dc <main+0x108>)
 800054c:	f000 ff0a 	bl	8001364 <HAL_GPIO_WritePin>
		   HAL_Delay(2);
 8000550:	2002      	movs	r0, #2
 8000552:	f000 fc61 	bl	8000e18 <HAL_Delay>
		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET); // pull CS high
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800055c:	481f      	ldr	r0, [pc, #124]	; (80005dc <main+0x108>)
 800055e:	f000 ff01 	bl	8001364 <HAL_GPIO_WritePin>
		   HAL_SPI_Transmit(&hspi4, tx_data, sizeof(tx_data), HAL_MAX_DELAY); //send 8 clock cycles
 8000562:	4639      	mov	r1, r7
 8000564:	f04f 33ff 	mov.w	r3, #4294967295
 8000568:	2201      	movs	r2, #1
 800056a:	481e      	ldr	r0, [pc, #120]	; (80005e4 <main+0x110>)
 800056c:	f001 fc01 	bl	8001d72 <HAL_SPI_Transmit>

		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);// pull CS low
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000576:	4819      	ldr	r0, [pc, #100]	; (80005dc <main+0x108>)
 8000578:	f000 fef4 	bl	8001364 <HAL_GPIO_WritePin>
		   HAL_SPI_Transmit(&hspi4, g_pucDataArray, g_iDataSize, HAL_MAX_DELAY); // send data. STM32 driver automatically sends data by chunks
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <main+0x114>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b29a      	uxth	r2, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	4919      	ldr	r1, [pc, #100]	; (80005ec <main+0x118>)
 8000588:	4816      	ldr	r0, [pc, #88]	; (80005e4 <main+0x110>)
 800058a:	f001 fbf2 	bl	8001d72 <HAL_SPI_Transmit>
		   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);// pull CS high after programming
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000594:	4811      	ldr	r0, [pc, #68]	; (80005dc <main+0x108>)
 8000596:	f000 fee5 	bl	8001364 <HAL_GPIO_WritePin>


		   for(int i=0;i<50;i++){ // send extra clock cycle for IO activation
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	e009      	b.n	80005b4 <main+0xe0>
			   HAL_SPI_Transmit(&hspi4, tx_data, sizeof(tx_data), HAL_MAX_DELAY);
 80005a0:	4639      	mov	r1, r7
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	2201      	movs	r2, #1
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <main+0x110>)
 80005aa:	f001 fbe2 	bl	8001d72 <HAL_SPI_Transmit>
		   for(int i=0;i<50;i++){ // send extra clock cycle for IO activation
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3301      	adds	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b31      	cmp	r3, #49	; 0x31
 80005b8:	ddf2      	ble.n	80005a0 <main+0xcc>

		   }
		   printf("ice40 Programming finished successfully!\n");
 80005ba:	480d      	ldr	r0, [pc, #52]	; (80005f0 <main+0x11c>)
 80005bc:	f001 ff10 	bl	80023e0 <puts>
 80005c0:	2300      	movs	r3, #0
 80005c2:	e007      	b.n	80005d4 <main+0x100>

		  break;
	  }

	  else{
		  printf("ice40 Programming is on hold\n");
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <main+0x120>)
 80005c6:	f001 ff0b 	bl	80023e0 <puts>
		  HAL_Delay(1000);
 80005ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ce:	f000 fc23 	bl	8000e18 <HAL_Delay>
  {
 80005d2:	e78a      	b.n	80004ea <main+0x16>

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	08002b24 	.word	0x08002b24
 80005e4:	20007968 	.word	0x20007968
 80005e8:	08002b94 	.word	0x08002b94
 80005ec:	20000000 	.word	0x20000000
 80005f0:	08002b48 	.word	0x08002b48
 80005f4:	08002b74 	.word	0x08002b74

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f001 ffca 	bl	80025a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xb8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <SystemClock_Config+0xb8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <SystemClock_Config+0xb8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <SystemClock_Config+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <SystemClock_Config+0xbc>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <SystemClock_Config+0xbc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fe95 	bl	8001398 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000674:	f000 f9b6 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f8f6 	bl	8001888 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a2:	f000 f99f 	bl	80009e4 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_SPI4_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_SPI4_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_SPI4_Init+0x64>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_SPI4_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_SPI4_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI4_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_SPI4_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI4_Init+0x64>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI4_Init+0x64>)
 80006ec:	2208      	movs	r2, #8
 80006ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_SPI4_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI4_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_SPI4_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI4_Init+0x64>)
 8000704:	220a      	movs	r2, #10
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_SPI4_Init+0x64>)
 800070a:	f001 faa9 	bl	8001c60 <HAL_SPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f966 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20007968 	.word	0x20007968
 8000720:	40013400 	.word	0x40013400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba3      	ldr	r3, [pc, #652]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa2      	ldr	r2, [pc, #648]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4ba0      	ldr	r3, [pc, #640]	; (80009cc <MX_GPIO_Init+0x2a8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9c      	ldr	r3, [pc, #624]	; (80009cc <MX_GPIO_Init+0x2a8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a9b      	ldr	r2, [pc, #620]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b99      	ldr	r3, [pc, #612]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b95      	ldr	r3, [pc, #596]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a94      	ldr	r2, [pc, #592]	; (80009cc <MX_GPIO_Init+0x2a8>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b92      	ldr	r3, [pc, #584]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8e      	ldr	r3, [pc, #568]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a8d      	ldr	r2, [pc, #564]	; (80009cc <MX_GPIO_Init+0x2a8>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b8b      	ldr	r3, [pc, #556]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b87      	ldr	r3, [pc, #540]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a86      	ldr	r2, [pc, #536]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b84      	ldr	r3, [pc, #528]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b80      	ldr	r3, [pc, #512]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7f      	ldr	r2, [pc, #508]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7d      	ldr	r3, [pc, #500]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2101      	movs	r1, #1
 80007e6:	487a      	ldr	r0, [pc, #488]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 80007e8:	f000 fdbc 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 80007f2:	4878      	ldr	r0, [pc, #480]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80007f4:	f000 fdb6 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f8:	2200      	movs	r2, #0
 80007fa:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fe:	4876      	ldr	r0, [pc, #472]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000800:	f000 fdb0 	bl	8001364 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000804:	2301      	movs	r3, #1
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	486d      	ldr	r0, [pc, #436]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 800081c:	f000 fc06 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000820:	2308      	movs	r3, #8
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000830:	2305      	movs	r3, #5
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4865      	ldr	r0, [pc, #404]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 800083c:	f000 fbf6 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000840:	2301      	movs	r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000844:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4861      	ldr	r0, [pc, #388]	; (80009dc <MX_GPIO_Init+0x2b8>)
 8000856:	f000 fbe9 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800085a:	2310      	movs	r3, #16
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800086a:	2306      	movs	r3, #6
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4859      	ldr	r0, [pc, #356]	; (80009dc <MX_GPIO_Init+0x2b8>)
 8000876:	f000 fbd9 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800087a:	23e0      	movs	r3, #224	; 0xe0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800088a:	2305      	movs	r3, #5
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4851      	ldr	r0, [pc, #324]	; (80009dc <MX_GPIO_Init+0x2b8>)
 8000896:	f000 fbc9 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4849      	ldr	r0, [pc, #292]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80008b0:	f000 fbbc 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 80008b4:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4841      	ldr	r0, [pc, #260]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80008ce:	f000 fbad 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e4:	2305      	movs	r3, #5
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	483c      	ldr	r0, [pc, #240]	; (80009e0 <MX_GPIO_Init+0x2bc>)
 80008f0:	f000 fb9c 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4832      	ldr	r0, [pc, #200]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 800090e:	f000 fb8d 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000912:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000924:	2306      	movs	r3, #6
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4828      	ldr	r0, [pc, #160]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000930:	f000 fb7c 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4824      	ldr	r0, [pc, #144]	; (80009dc <MX_GPIO_Init+0x2b8>)
 800094a:	f000 fb6f 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800094e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000960:	230a      	movs	r3, #10
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	481c      	ldr	r0, [pc, #112]	; (80009dc <MX_GPIO_Init+0x2b8>)
 800096c:	f000 fb5e 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000970:	2320      	movs	r3, #32
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4815      	ldr	r0, [pc, #84]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000984:	f000 fb52 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000988:	f44f 7310 	mov.w	r3, #576	; 0x240
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098e:	2312      	movs	r3, #18
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099a:	2304      	movs	r3, #4
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	480e      	ldr	r0, [pc, #56]	; (80009e0 <MX_GPIO_Init+0x2bc>)
 80009a6:	f000 fb41 	bl	800102c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80009c0:	f000 fb34 	bl	800102c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40020000 	.word	0x40020000
 80009e0:	40020400 	.word	0x40020400

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2e:	2007      	movs	r0, #7
 8000a30:	f000 fac8 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <HAL_SPI_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12c      	bne.n	8000abc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000a9a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000aac:	2305      	movs	r3, #5
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <HAL_SPI_MspInit+0x8c>)
 8000ab8:	f000 fab8 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40013400 	.word	0x40013400
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 f95c 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <ITM_SendChar+0x48>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <ITM_SendChar+0x48>)
 8000b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b38:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <ITM_SendChar+0x4c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <ITM_SendChar+0x4c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b46:	bf00      	nop
 8000b48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f8      	beq.n	8000b48 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	6013      	str	r3, [r2, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000edfc 	.word	0xe000edfc
 8000b70:	e0000e00 	.word	0xe0000e00

08000b74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e00a      	b.n	8000b9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b86:	f3af 8000 	nop.w
 8000b8a:	4601      	mov	r1, r0
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	60ba      	str	r2, [r7, #8]
 8000b92:	b2ca      	uxtb	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf0      	blt.n	8000b86 <_read+0x12>
  }

  return len;
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e009      	b.n	8000bd4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	60ba      	str	r2, [r7, #8]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffab 	bl	8000b24 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dbf1      	blt.n	8000bc0 <_write+0x12>
  }
  return len;
 8000bdc:	687b      	ldr	r3, [r7, #4]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_close>:

int _close(int file)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_isatty>:

int _isatty(int file)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f001 fcdc 	bl	800263c <__errno>
 8000c84:	4603      	mov	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <_sbrk+0x64>)
 8000ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20020000 	.word	0x20020000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	200079c0 	.word	0x200079c0
 8000cb8:	20007b18 	.word	0x20007b18

08000cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce4:	f7ff ffea 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	; (8000d20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	; (8000d2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f001 fc9b 	bl	8002648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fbdf 	bl	80004d4 <main>
  bx  lr    
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	2000794c 	.word	0x2000794c
  ldr r2, =_sidata
 8000d24:	08002bb8 	.word	0x08002bb8
  ldr r2, =_sbss
 8000d28:	2000794c 	.word	0x2000794c
  ldr r4, =_ebss
 8000d2c:	20007b14 	.word	0x20007b14

08000d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <HAL_Init+0x40>)
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_Init+0x40>)
 8000d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_Init+0x40>)
 8000d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f931 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f808 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f7ff fe42 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023c00 	.word	0x40023c00

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x54>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f93b 	bl	8001012 <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00e      	b.n	8000dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d80a      	bhi.n	8000dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 f911 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_InitTick+0x5c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200078e4 	.word	0x200078e4
 8000dd0:	200078ec 	.word	0x200078ec
 8000dd4:	200078e8 	.word	0x200078e8

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200078ec 	.word	0x200078ec
 8000dfc:	200079c4 	.word	0x200079c4

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200079c4 	.word	0x200079c4

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff ffee 	bl	8000e00 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_Delay+0x44>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffde 	bl	8000e00 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200078ec 	.word	0x200078ec

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff47 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff5c 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffb0 	bl	8000f80 <SysTick_Config>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	e159      	b.n	80012fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001048:	2201      	movs	r2, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	429a      	cmp	r2, r3
 8001062:	f040 8148 	bne.w	80012f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b01      	cmp	r3, #1
 8001070:	d005      	beq.n	800107e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107a:	2b02      	cmp	r3, #2
 800107c:	d130      	bne.n	80010e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	f003 0201 	and.w	r2, r3, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d017      	beq.n	800111c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d123      	bne.n	8001170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220f      	movs	r2, #15
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	69b9      	ldr	r1, [r7, #24]
 800116c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0203 	and.w	r2, r3, #3
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80a2 	beq.w	80012f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b57      	ldr	r3, [pc, #348]	; (8001314 <HAL_GPIO_Init+0x2e8>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a56      	ldr	r2, [pc, #344]	; (8001314 <HAL_GPIO_Init+0x2e8>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b54      	ldr	r3, [pc, #336]	; (8001314 <HAL_GPIO_Init+0x2e8>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ce:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_GPIO_Init+0x2ec>)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	220f      	movs	r2, #15
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a49      	ldr	r2, [pc, #292]	; (800131c <HAL_GPIO_Init+0x2f0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x202>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a48      	ldr	r2, [pc, #288]	; (8001320 <HAL_GPIO_Init+0x2f4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x1fe>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a47      	ldr	r2, [pc, #284]	; (8001324 <HAL_GPIO_Init+0x2f8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x1fa>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a46      	ldr	r2, [pc, #280]	; (8001328 <HAL_GPIO_Init+0x2fc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x1f6>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a45      	ldr	r2, [pc, #276]	; (800132c <HAL_GPIO_Init+0x300>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x1f2>
 800121a:	2304      	movs	r3, #4
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x204>
 800121e:	2307      	movs	r3, #7
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x204>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x204>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x204>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x204>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x2ec>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b38      	ldr	r3, [pc, #224]	; (8001330 <HAL_GPIO_Init+0x304>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a2f      	ldr	r2, [pc, #188]	; (8001330 <HAL_GPIO_Init+0x304>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <HAL_GPIO_Init+0x304>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a24      	ldr	r2, [pc, #144]	; (8001330 <HAL_GPIO_Init+0x304>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_GPIO_Init+0x304>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c6:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <HAL_GPIO_Init+0x304>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_GPIO_Init+0x304>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f0:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <HAL_GPIO_Init+0x304>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f aea2 	bls.w	8001048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e267      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d075      	beq.n	80014a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013b6:	4b88      	ldr	r3, [pc, #544]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d00c      	beq.n	80013dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d112      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ce:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013da:	d10b      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	4b7e      	ldr	r3, [pc, #504]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d05b      	beq.n	80014a0 <HAL_RCC_OscConfig+0x108>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d157      	bne.n	80014a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e242      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fc:	d106      	bne.n	800140c <HAL_RCC_OscConfig+0x74>
 80013fe:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a75      	ldr	r2, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0xb0>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x98>
 8001416:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6f      	ldr	r2, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b6d      	ldr	r3, [pc, #436]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6c      	ldr	r2, [pc, #432]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0xb0>
 8001430:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a68      	ldr	r2, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a65      	ldr	r2, [pc, #404]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fcd6 	bl	8000e00 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fcd2 	bl	8000e00 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e207      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b5b      	ldr	r3, [pc, #364]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0xc0>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fcc2 	bl	8000e00 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fcbe 	bl	8000e00 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1f3      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0xe8>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d063      	beq.n	8001576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ae:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d11c      	bne.n	8001500 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d116      	bne.n	8001500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x152>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e1c7      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4937      	ldr	r1, [pc, #220]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	e03a      	b.n	8001576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d020      	beq.n	800154a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_RCC_OscConfig+0x244>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fc77 	bl	8000e00 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fc73 	bl	8000e00 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1a8      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4925      	ldr	r1, [pc, #148]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_OscConfig+0x244>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc56 	bl	8000e00 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff fc52 	bl	8000e00 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e187      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d036      	beq.n	80015f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d016      	beq.n	80015b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_RCC_OscConfig+0x248>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fc36 	bl	8000e00 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff fc32 	bl	8000e00 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e167      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_OscConfig+0x240>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x200>
 80015b6:	e01b      	b.n	80015f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_RCC_OscConfig+0x248>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fc1f 	bl	8000e00 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e00e      	b.n	80015e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fc1b 	bl	8000e00 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d907      	bls.n	80015e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e150      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
 80015d8:	40023800 	.word	0x40023800
 80015dc:	42470000 	.word	0x42470000
 80015e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80015e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ea      	bne.n	80015c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8097 	beq.w	800172c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001602:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b7d      	ldr	r3, [pc, #500]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a7c      	ldr	r2, [pc, #496]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b7a      	ldr	r3, [pc, #488]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b77      	ldr	r3, [pc, #476]	; (800180c <HAL_RCC_OscConfig+0x474>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4b74      	ldr	r3, [pc, #464]	; (800180c <HAL_RCC_OscConfig+0x474>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a73      	ldr	r2, [pc, #460]	; (800180c <HAL_RCC_OscConfig+0x474>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff fbdb 	bl	8000e00 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7ff fbd7 	bl	8000e00 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e10c      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	4b6a      	ldr	r3, [pc, #424]	; (800180c <HAL_RCC_OscConfig+0x474>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x2ea>
 8001674:	4b64      	ldr	r3, [pc, #400]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	4a63      	ldr	r2, [pc, #396]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
 8001680:	e01c      	b.n	80016bc <HAL_RCC_OscConfig+0x324>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x30c>
 800168a:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	4a5e      	ldr	r2, [pc, #376]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6713      	str	r3, [r2, #112]	; 0x70
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	4a5b      	ldr	r2, [pc, #364]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6713      	str	r3, [r2, #112]	; 0x70
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0x324>
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	4a57      	ldr	r2, [pc, #348]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6713      	str	r3, [r2, #112]	; 0x70
 80016b0:	4b55      	ldr	r3, [pc, #340]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4a54      	ldr	r2, [pc, #336]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016b6:	f023 0304 	bic.w	r3, r3, #4
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d015      	beq.n	80016f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fb9c 	bl	8000e00 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff fb98 	bl	8000e00 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e0cb      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e2:	4b49      	ldr	r3, [pc, #292]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0ee      	beq.n	80016cc <HAL_RCC_OscConfig+0x334>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff fb86 	bl	8000e00 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff fb82 	bl	8000e00 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0b5      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170e:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1ee      	bne.n	80016f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a38      	ldr	r2, [pc, #224]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80a1 	beq.w	8001878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b08      	cmp	r3, #8
 8001740:	d05c      	beq.n	80017fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d141      	bne.n	80017ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_RCC_OscConfig+0x478>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fb56 	bl	8000e00 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fb52 	bl	8000e00 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e087      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	019b      	lsls	r3, r3, #6
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	085b      	lsrs	r3, r3, #1
 800178e:	3b01      	subs	r3, #1
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	061b      	lsls	r3, r3, #24
 800179a:	491b      	ldr	r1, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x478>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fb2b 	bl	8000e00 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fb27 	bl	8000e00 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e05c      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x416>
 80017cc:	e054      	b.n	8001878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_RCC_OscConfig+0x478>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb14 	bl	8000e00 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fb10 	bl	8000e00 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e045      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x470>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x444>
 80017fa:	e03d      	b.n	8001878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e038      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000
 8001810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x4ec>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d028      	beq.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d121      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d11a      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800184c:	4293      	cmp	r3, r2
 800184e:	d111      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d107      	bne.n	8001874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0cc      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d90c      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494d      	ldr	r1, [pc, #308]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d044      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d119      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	2b03      	cmp	r3, #3
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e067      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 0203 	bic.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4934      	ldr	r1, [pc, #208]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001978:	f7ff fa42 	bl	8000e00 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	e00a      	b.n	8001996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7ff fa3e 	bl	8000e00 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e04f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 020c 	and.w	r2, r3, #12
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1eb      	bne.n	8001980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d20c      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e032      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4916      	ldr	r1, [pc, #88]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f821 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	490a      	ldr	r1, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f9a2 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08002b98 	.word	0x08002b98
 8001a4c:	200078e4 	.word	0x200078e4
 8001a50:	200078e8 	.word	0x200078e8

08001a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a58:	b094      	sub	sp, #80	; 0x50
 8001a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a6c:	4b79      	ldr	r3, [pc, #484]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d00d      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x40>
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	f200 80e1 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x34>
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a86:	e0db      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b73      	ldr	r3, [pc, #460]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a8c:	e0db      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a92:	e0d8      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a94:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d063      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001abc:	633b      	str	r3, [r7, #48]	; 0x30
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	462b      	mov	r3, r5
 8001aca:	f04f 0000 	mov.w	r0, #0
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	0159      	lsls	r1, r3, #5
 8001ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad8:	0150      	lsls	r0, r2, #5
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4621      	mov	r1, r4
 8001ae0:	1a51      	subs	r1, r2, r1
 8001ae2:	6139      	str	r1, [r7, #16]
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001af8:	4659      	mov	r1, fp
 8001afa:	018b      	lsls	r3, r1, #6
 8001afc:	4651      	mov	r1, sl
 8001afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b02:	4651      	mov	r1, sl
 8001b04:	018a      	lsls	r2, r1, #6
 8001b06:	4651      	mov	r1, sl
 8001b08:	ebb2 0801 	subs.w	r8, r2, r1
 8001b0c:	4659      	mov	r1, fp
 8001b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b26:	4690      	mov	r8, r2
 8001b28:	4699      	mov	r9, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	eb18 0303 	adds.w	r3, r8, r3
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	462b      	mov	r3, r5
 8001b34:	eb49 0303 	adc.w	r3, r9, r3
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b46:	4629      	mov	r1, r5
 8001b48:	024b      	lsls	r3, r1, #9
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b50:	4621      	mov	r1, r4
 8001b52:	024a      	lsls	r2, r1, #9
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b64:	f7fe fb38 	bl	80001d8 <__aeabi_uldivmod>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b70:	e058      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b82:	623b      	str	r3, [r7, #32]
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
 8001b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	464b      	mov	r3, r9
 8001b90:	f04f 0000 	mov.w	r0, #0
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	0159      	lsls	r1, r3, #5
 8001b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b9e:	0150      	lsls	r0, r2, #5
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4641      	mov	r1, r8
 8001ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001baa:	4649      	mov	r1, r9
 8001bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	00eb      	lsls	r3, r5, #3
 8001bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bda:	00e2      	lsls	r2, r4, #3
 8001bdc:	4614      	mov	r4, r2
 8001bde:	461d      	mov	r5, r3
 8001be0:	4643      	mov	r3, r8
 8001be2:	18e3      	adds	r3, r4, r3
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	464b      	mov	r3, r9
 8001be8:	eb45 0303 	adc.w	r3, r5, r3
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	028b      	lsls	r3, r1, #10
 8001bfe:	4621      	mov	r1, r4
 8001c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c04:	4621      	mov	r1, r4
 8001c06:	028a      	lsls	r2, r1, #10
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	61fa      	str	r2, [r7, #28]
 8001c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c18:	f7fe fade 	bl	80001d8 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3750      	adds	r7, #80	; 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	007a1200 	.word	0x007a1200

08001c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e07b      	b.n	8001d6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c82:	d009      	beq.n	8001c98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
 8001c8a:	e005      	b.n	8001c98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe fec4 	bl	8000a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1c:	ea42 0103 	orr.w	r1, r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	f003 0104 	and.w	r1, r3, #4
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f003 0210 	and.w	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69da      	ldr	r2, [r3, #28]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b088      	sub	sp, #32
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d82:	f7ff f83d 	bl	8000e00 <HAL_GetTick>
 8001d86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d001      	beq.n	8001d9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e12a      	b.n	8001ff2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_SPI_Transmit+0x36>
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e122      	b.n	8001ff2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_SPI_Transmit+0x48>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e11b      	b.n	8001ff2 <HAL_SPI_Transmit+0x280>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	88fa      	ldrh	r2, [r7, #6]
 8001de0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e08:	d10f      	bne.n	8001e2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e34:	2b40      	cmp	r3, #64	; 0x40
 8001e36:	d007      	beq.n	8001e48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e50:	d152      	bne.n	8001ef8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_SPI_Transmit+0xee>
 8001e5a:	8b7b      	ldrh	r3, [r7, #26]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d145      	bne.n	8001eec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	1c9a      	adds	r2, r3, #2
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e84:	e032      	b.n	8001eec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d112      	bne.n	8001eba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	1c9a      	adds	r2, r3, #2
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001eb8:	e018      	b.n	8001eec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eba:	f7fe ffa1 	bl	8000e00 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d803      	bhi.n	8001ed2 <HAL_SPI_Transmit+0x160>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d102      	bne.n	8001ed8 <HAL_SPI_Transmit+0x166>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e082      	b.n	8001ff2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1c7      	bne.n	8001e86 <HAL_SPI_Transmit+0x114>
 8001ef6:	e053      	b.n	8001fa0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_SPI_Transmit+0x194>
 8001f00:	8b7b      	ldrh	r3, [r7, #26]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d147      	bne.n	8001f96 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	330c      	adds	r3, #12
 8001f10:	7812      	ldrb	r2, [r2, #0]
 8001f12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f2c:	e033      	b.n	8001f96 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d113      	bne.n	8001f64 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	330c      	adds	r3, #12
 8001f46:	7812      	ldrb	r2, [r2, #0]
 8001f48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f62:	e018      	b.n	8001f96 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f64:	f7fe ff4c 	bl	8000e00 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d803      	bhi.n	8001f7c <HAL_SPI_Transmit+0x20a>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7a:	d102      	bne.n	8001f82 <HAL_SPI_Transmit+0x210>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e02d      	b.n	8001ff2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1c6      	bne.n	8001f2e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f8b1 	bl	800210c <SPI_EndRxTxTransaction>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800200c:	f7fe fef8 	bl	8000e00 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	4413      	add	r3, r2
 800201a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800201c:	f7fe fef0 	bl	8000e00 <HAL_GetTick>
 8002020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002022:	4b39      	ldr	r3, [pc, #228]	; (8002108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	015b      	lsls	r3, r3, #5
 8002028:	0d1b      	lsrs	r3, r3, #20
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002032:	e054      	b.n	80020de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d050      	beq.n	80020de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800203c:	f7fe fee0 	bl	8000e00 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	d902      	bls.n	8002052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d13d      	bne.n	80020ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800206a:	d111      	bne.n	8002090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002074:	d004      	beq.n	8002080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207e:	d107      	bne.n	8002090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800208e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002098:	d10f      	bne.n	80020ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e017      	b.n	80020fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3b01      	subs	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4013      	ands	r3, r2
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	bf0c      	ite	eq
 80020ee:	2301      	moveq	r3, #1
 80020f0:	2300      	movne	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d19b      	bne.n	8002034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200078e4 	.word	0x200078e4

0800210c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2201      	movs	r2, #1
 8002120:	2102      	movs	r1, #2
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f7ff ff6a 	bl	8001ffc <SPI_WaitFlagStateUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e032      	b.n	80021a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <SPI_EndRxTxTransaction+0xa0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <SPI_EndRxTxTransaction+0xa4>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0d5b      	lsrs	r3, r3, #21
 800214a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215c:	d112      	bne.n	8002184 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2200      	movs	r2, #0
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff ff47 	bl	8001ffc <SPI_WaitFlagStateUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d016      	beq.n	80021a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	f043 0220 	orr.w	r2, r3, #32
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e00f      	b.n	80021a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3b01      	subs	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b80      	cmp	r3, #128	; 0x80
 800219c:	d0f2      	beq.n	8002184 <SPI_EndRxTxTransaction+0x78>
 800219e:	e000      	b.n	80021a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80021a0:	bf00      	nop
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200078e4 	.word	0x200078e4
 80021b0:	165e9f81 	.word	0x165e9f81

080021b4 <std>:
 80021b4:	2300      	movs	r3, #0
 80021b6:	b510      	push	{r4, lr}
 80021b8:	4604      	mov	r4, r0
 80021ba:	e9c0 3300 	strd	r3, r3, [r0]
 80021be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021c2:	6083      	str	r3, [r0, #8]
 80021c4:	8181      	strh	r1, [r0, #12]
 80021c6:	6643      	str	r3, [r0, #100]	; 0x64
 80021c8:	81c2      	strh	r2, [r0, #14]
 80021ca:	6183      	str	r3, [r0, #24]
 80021cc:	4619      	mov	r1, r3
 80021ce:	2208      	movs	r2, #8
 80021d0:	305c      	adds	r0, #92	; 0x5c
 80021d2:	f000 f9e5 	bl	80025a0 <memset>
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <std+0x58>)
 80021d8:	6263      	str	r3, [r4, #36]	; 0x24
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <std+0x5c>)
 80021dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <std+0x60>)
 80021e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <std+0x64>)
 80021e4:	6323      	str	r3, [r4, #48]	; 0x30
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <std+0x68>)
 80021e8:	6224      	str	r4, [r4, #32]
 80021ea:	429c      	cmp	r4, r3
 80021ec:	d006      	beq.n	80021fc <std+0x48>
 80021ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80021f2:	4294      	cmp	r4, r2
 80021f4:	d002      	beq.n	80021fc <std+0x48>
 80021f6:	33d0      	adds	r3, #208	; 0xd0
 80021f8:	429c      	cmp	r4, r3
 80021fa:	d105      	bne.n	8002208 <std+0x54>
 80021fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002204:	f000 ba44 	b.w	8002690 <__retarget_lock_init_recursive>
 8002208:	bd10      	pop	{r4, pc}
 800220a:	bf00      	nop
 800220c:	080023f1 	.word	0x080023f1
 8002210:	08002413 	.word	0x08002413
 8002214:	0800244b 	.word	0x0800244b
 8002218:	0800246f 	.word	0x0800246f
 800221c:	200079c8 	.word	0x200079c8

08002220 <stdio_exit_handler>:
 8002220:	4a02      	ldr	r2, [pc, #8]	; (800222c <stdio_exit_handler+0xc>)
 8002222:	4903      	ldr	r1, [pc, #12]	; (8002230 <stdio_exit_handler+0x10>)
 8002224:	4803      	ldr	r0, [pc, #12]	; (8002234 <stdio_exit_handler+0x14>)
 8002226:	f000 b869 	b.w	80022fc <_fwalk_sglue>
 800222a:	bf00      	nop
 800222c:	200078f0 	.word	0x200078f0
 8002230:	08002995 	.word	0x08002995
 8002234:	200078fc 	.word	0x200078fc

08002238 <cleanup_stdio>:
 8002238:	6841      	ldr	r1, [r0, #4]
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <cleanup_stdio+0x34>)
 800223c:	4299      	cmp	r1, r3
 800223e:	b510      	push	{r4, lr}
 8002240:	4604      	mov	r4, r0
 8002242:	d001      	beq.n	8002248 <cleanup_stdio+0x10>
 8002244:	f000 fba6 	bl	8002994 <_fflush_r>
 8002248:	68a1      	ldr	r1, [r4, #8]
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <cleanup_stdio+0x38>)
 800224c:	4299      	cmp	r1, r3
 800224e:	d002      	beq.n	8002256 <cleanup_stdio+0x1e>
 8002250:	4620      	mov	r0, r4
 8002252:	f000 fb9f 	bl	8002994 <_fflush_r>
 8002256:	68e1      	ldr	r1, [r4, #12]
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <cleanup_stdio+0x3c>)
 800225a:	4299      	cmp	r1, r3
 800225c:	d004      	beq.n	8002268 <cleanup_stdio+0x30>
 800225e:	4620      	mov	r0, r4
 8002260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002264:	f000 bb96 	b.w	8002994 <_fflush_r>
 8002268:	bd10      	pop	{r4, pc}
 800226a:	bf00      	nop
 800226c:	200079c8 	.word	0x200079c8
 8002270:	20007a30 	.word	0x20007a30
 8002274:	20007a98 	.word	0x20007a98

08002278 <global_stdio_init.part.0>:
 8002278:	b510      	push	{r4, lr}
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <global_stdio_init.part.0+0x30>)
 800227c:	4c0b      	ldr	r4, [pc, #44]	; (80022ac <global_stdio_init.part.0+0x34>)
 800227e:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <global_stdio_init.part.0+0x38>)
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	4620      	mov	r0, r4
 8002284:	2200      	movs	r2, #0
 8002286:	2104      	movs	r1, #4
 8002288:	f7ff ff94 	bl	80021b4 <std>
 800228c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002290:	2201      	movs	r2, #1
 8002292:	2109      	movs	r1, #9
 8002294:	f7ff ff8e 	bl	80021b4 <std>
 8002298:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800229c:	2202      	movs	r2, #2
 800229e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022a2:	2112      	movs	r1, #18
 80022a4:	f7ff bf86 	b.w	80021b4 <std>
 80022a8:	20007b00 	.word	0x20007b00
 80022ac:	200079c8 	.word	0x200079c8
 80022b0:	08002221 	.word	0x08002221

080022b4 <__sfp_lock_acquire>:
 80022b4:	4801      	ldr	r0, [pc, #4]	; (80022bc <__sfp_lock_acquire+0x8>)
 80022b6:	f000 b9ec 	b.w	8002692 <__retarget_lock_acquire_recursive>
 80022ba:	bf00      	nop
 80022bc:	20007b09 	.word	0x20007b09

080022c0 <__sfp_lock_release>:
 80022c0:	4801      	ldr	r0, [pc, #4]	; (80022c8 <__sfp_lock_release+0x8>)
 80022c2:	f000 b9e7 	b.w	8002694 <__retarget_lock_release_recursive>
 80022c6:	bf00      	nop
 80022c8:	20007b09 	.word	0x20007b09

080022cc <__sinit>:
 80022cc:	b510      	push	{r4, lr}
 80022ce:	4604      	mov	r4, r0
 80022d0:	f7ff fff0 	bl	80022b4 <__sfp_lock_acquire>
 80022d4:	6a23      	ldr	r3, [r4, #32]
 80022d6:	b11b      	cbz	r3, 80022e0 <__sinit+0x14>
 80022d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022dc:	f7ff bff0 	b.w	80022c0 <__sfp_lock_release>
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <__sinit+0x28>)
 80022e2:	6223      	str	r3, [r4, #32]
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <__sinit+0x2c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f5      	bne.n	80022d8 <__sinit+0xc>
 80022ec:	f7ff ffc4 	bl	8002278 <global_stdio_init.part.0>
 80022f0:	e7f2      	b.n	80022d8 <__sinit+0xc>
 80022f2:	bf00      	nop
 80022f4:	08002239 	.word	0x08002239
 80022f8:	20007b00 	.word	0x20007b00

080022fc <_fwalk_sglue>:
 80022fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002300:	4607      	mov	r7, r0
 8002302:	4688      	mov	r8, r1
 8002304:	4614      	mov	r4, r2
 8002306:	2600      	movs	r6, #0
 8002308:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800230c:	f1b9 0901 	subs.w	r9, r9, #1
 8002310:	d505      	bpl.n	800231e <_fwalk_sglue+0x22>
 8002312:	6824      	ldr	r4, [r4, #0]
 8002314:	2c00      	cmp	r4, #0
 8002316:	d1f7      	bne.n	8002308 <_fwalk_sglue+0xc>
 8002318:	4630      	mov	r0, r6
 800231a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800231e:	89ab      	ldrh	r3, [r5, #12]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d907      	bls.n	8002334 <_fwalk_sglue+0x38>
 8002324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002328:	3301      	adds	r3, #1
 800232a:	d003      	beq.n	8002334 <_fwalk_sglue+0x38>
 800232c:	4629      	mov	r1, r5
 800232e:	4638      	mov	r0, r7
 8002330:	47c0      	blx	r8
 8002332:	4306      	orrs	r6, r0
 8002334:	3568      	adds	r5, #104	; 0x68
 8002336:	e7e9      	b.n	800230c <_fwalk_sglue+0x10>

08002338 <_puts_r>:
 8002338:	6a03      	ldr	r3, [r0, #32]
 800233a:	b570      	push	{r4, r5, r6, lr}
 800233c:	6884      	ldr	r4, [r0, #8]
 800233e:	4605      	mov	r5, r0
 8002340:	460e      	mov	r6, r1
 8002342:	b90b      	cbnz	r3, 8002348 <_puts_r+0x10>
 8002344:	f7ff ffc2 	bl	80022cc <__sinit>
 8002348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800234a:	07db      	lsls	r3, r3, #31
 800234c:	d405      	bmi.n	800235a <_puts_r+0x22>
 800234e:	89a3      	ldrh	r3, [r4, #12]
 8002350:	0598      	lsls	r0, r3, #22
 8002352:	d402      	bmi.n	800235a <_puts_r+0x22>
 8002354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002356:	f000 f99c 	bl	8002692 <__retarget_lock_acquire_recursive>
 800235a:	89a3      	ldrh	r3, [r4, #12]
 800235c:	0719      	lsls	r1, r3, #28
 800235e:	d513      	bpl.n	8002388 <_puts_r+0x50>
 8002360:	6923      	ldr	r3, [r4, #16]
 8002362:	b18b      	cbz	r3, 8002388 <_puts_r+0x50>
 8002364:	3e01      	subs	r6, #1
 8002366:	68a3      	ldr	r3, [r4, #8]
 8002368:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800236c:	3b01      	subs	r3, #1
 800236e:	60a3      	str	r3, [r4, #8]
 8002370:	b9e9      	cbnz	r1, 80023ae <_puts_r+0x76>
 8002372:	2b00      	cmp	r3, #0
 8002374:	da2e      	bge.n	80023d4 <_puts_r+0x9c>
 8002376:	4622      	mov	r2, r4
 8002378:	210a      	movs	r1, #10
 800237a:	4628      	mov	r0, r5
 800237c:	f000 f87b 	bl	8002476 <__swbuf_r>
 8002380:	3001      	adds	r0, #1
 8002382:	d007      	beq.n	8002394 <_puts_r+0x5c>
 8002384:	250a      	movs	r5, #10
 8002386:	e007      	b.n	8002398 <_puts_r+0x60>
 8002388:	4621      	mov	r1, r4
 800238a:	4628      	mov	r0, r5
 800238c:	f000 f8b0 	bl	80024f0 <__swsetup_r>
 8002390:	2800      	cmp	r0, #0
 8002392:	d0e7      	beq.n	8002364 <_puts_r+0x2c>
 8002394:	f04f 35ff 	mov.w	r5, #4294967295
 8002398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800239a:	07da      	lsls	r2, r3, #31
 800239c:	d405      	bmi.n	80023aa <_puts_r+0x72>
 800239e:	89a3      	ldrh	r3, [r4, #12]
 80023a0:	059b      	lsls	r3, r3, #22
 80023a2:	d402      	bmi.n	80023aa <_puts_r+0x72>
 80023a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023a6:	f000 f975 	bl	8002694 <__retarget_lock_release_recursive>
 80023aa:	4628      	mov	r0, r5
 80023ac:	bd70      	pop	{r4, r5, r6, pc}
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da04      	bge.n	80023bc <_puts_r+0x84>
 80023b2:	69a2      	ldr	r2, [r4, #24]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	dc06      	bgt.n	80023c6 <_puts_r+0x8e>
 80023b8:	290a      	cmp	r1, #10
 80023ba:	d004      	beq.n	80023c6 <_puts_r+0x8e>
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	6022      	str	r2, [r4, #0]
 80023c2:	7019      	strb	r1, [r3, #0]
 80023c4:	e7cf      	b.n	8002366 <_puts_r+0x2e>
 80023c6:	4622      	mov	r2, r4
 80023c8:	4628      	mov	r0, r5
 80023ca:	f000 f854 	bl	8002476 <__swbuf_r>
 80023ce:	3001      	adds	r0, #1
 80023d0:	d1c9      	bne.n	8002366 <_puts_r+0x2e>
 80023d2:	e7df      	b.n	8002394 <_puts_r+0x5c>
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	250a      	movs	r5, #10
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	6022      	str	r2, [r4, #0]
 80023dc:	701d      	strb	r5, [r3, #0]
 80023de:	e7db      	b.n	8002398 <_puts_r+0x60>

080023e0 <puts>:
 80023e0:	4b02      	ldr	r3, [pc, #8]	; (80023ec <puts+0xc>)
 80023e2:	4601      	mov	r1, r0
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	f7ff bfa7 	b.w	8002338 <_puts_r>
 80023ea:	bf00      	nop
 80023ec:	20007948 	.word	0x20007948

080023f0 <__sread>:
 80023f0:	b510      	push	{r4, lr}
 80023f2:	460c      	mov	r4, r1
 80023f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023f8:	f000 f8fc 	bl	80025f4 <_read_r>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	bfab      	itete	ge
 8002400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002402:	89a3      	ldrhlt	r3, [r4, #12]
 8002404:	181b      	addge	r3, r3, r0
 8002406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800240a:	bfac      	ite	ge
 800240c:	6563      	strge	r3, [r4, #84]	; 0x54
 800240e:	81a3      	strhlt	r3, [r4, #12]
 8002410:	bd10      	pop	{r4, pc}

08002412 <__swrite>:
 8002412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002416:	461f      	mov	r7, r3
 8002418:	898b      	ldrh	r3, [r1, #12]
 800241a:	05db      	lsls	r3, r3, #23
 800241c:	4605      	mov	r5, r0
 800241e:	460c      	mov	r4, r1
 8002420:	4616      	mov	r6, r2
 8002422:	d505      	bpl.n	8002430 <__swrite+0x1e>
 8002424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002428:	2302      	movs	r3, #2
 800242a:	2200      	movs	r2, #0
 800242c:	f000 f8d0 	bl	80025d0 <_lseek_r>
 8002430:	89a3      	ldrh	r3, [r4, #12]
 8002432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800243a:	81a3      	strh	r3, [r4, #12]
 800243c:	4632      	mov	r2, r6
 800243e:	463b      	mov	r3, r7
 8002440:	4628      	mov	r0, r5
 8002442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002446:	f000 b8e7 	b.w	8002618 <_write_r>

0800244a <__sseek>:
 800244a:	b510      	push	{r4, lr}
 800244c:	460c      	mov	r4, r1
 800244e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002452:	f000 f8bd 	bl	80025d0 <_lseek_r>
 8002456:	1c43      	adds	r3, r0, #1
 8002458:	89a3      	ldrh	r3, [r4, #12]
 800245a:	bf15      	itete	ne
 800245c:	6560      	strne	r0, [r4, #84]	; 0x54
 800245e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002466:	81a3      	strheq	r3, [r4, #12]
 8002468:	bf18      	it	ne
 800246a:	81a3      	strhne	r3, [r4, #12]
 800246c:	bd10      	pop	{r4, pc}

0800246e <__sclose>:
 800246e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002472:	f000 b89d 	b.w	80025b0 <_close_r>

08002476 <__swbuf_r>:
 8002476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002478:	460e      	mov	r6, r1
 800247a:	4614      	mov	r4, r2
 800247c:	4605      	mov	r5, r0
 800247e:	b118      	cbz	r0, 8002488 <__swbuf_r+0x12>
 8002480:	6a03      	ldr	r3, [r0, #32]
 8002482:	b90b      	cbnz	r3, 8002488 <__swbuf_r+0x12>
 8002484:	f7ff ff22 	bl	80022cc <__sinit>
 8002488:	69a3      	ldr	r3, [r4, #24]
 800248a:	60a3      	str	r3, [r4, #8]
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	071a      	lsls	r2, r3, #28
 8002490:	d525      	bpl.n	80024de <__swbuf_r+0x68>
 8002492:	6923      	ldr	r3, [r4, #16]
 8002494:	b31b      	cbz	r3, 80024de <__swbuf_r+0x68>
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	6922      	ldr	r2, [r4, #16]
 800249a:	1a98      	subs	r0, r3, r2
 800249c:	6963      	ldr	r3, [r4, #20]
 800249e:	b2f6      	uxtb	r6, r6
 80024a0:	4283      	cmp	r3, r0
 80024a2:	4637      	mov	r7, r6
 80024a4:	dc04      	bgt.n	80024b0 <__swbuf_r+0x3a>
 80024a6:	4621      	mov	r1, r4
 80024a8:	4628      	mov	r0, r5
 80024aa:	f000 fa73 	bl	8002994 <_fflush_r>
 80024ae:	b9e0      	cbnz	r0, 80024ea <__swbuf_r+0x74>
 80024b0:	68a3      	ldr	r3, [r4, #8]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	60a3      	str	r3, [r4, #8]
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	6022      	str	r2, [r4, #0]
 80024bc:	701e      	strb	r6, [r3, #0]
 80024be:	6962      	ldr	r2, [r4, #20]
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d004      	beq.n	80024d0 <__swbuf_r+0x5a>
 80024c6:	89a3      	ldrh	r3, [r4, #12]
 80024c8:	07db      	lsls	r3, r3, #31
 80024ca:	d506      	bpl.n	80024da <__swbuf_r+0x64>
 80024cc:	2e0a      	cmp	r6, #10
 80024ce:	d104      	bne.n	80024da <__swbuf_r+0x64>
 80024d0:	4621      	mov	r1, r4
 80024d2:	4628      	mov	r0, r5
 80024d4:	f000 fa5e 	bl	8002994 <_fflush_r>
 80024d8:	b938      	cbnz	r0, 80024ea <__swbuf_r+0x74>
 80024da:	4638      	mov	r0, r7
 80024dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024de:	4621      	mov	r1, r4
 80024e0:	4628      	mov	r0, r5
 80024e2:	f000 f805 	bl	80024f0 <__swsetup_r>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d0d5      	beq.n	8002496 <__swbuf_r+0x20>
 80024ea:	f04f 37ff 	mov.w	r7, #4294967295
 80024ee:	e7f4      	b.n	80024da <__swbuf_r+0x64>

080024f0 <__swsetup_r>:
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4b2a      	ldr	r3, [pc, #168]	; (800259c <__swsetup_r+0xac>)
 80024f4:	4605      	mov	r5, r0
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	460c      	mov	r4, r1
 80024fa:	b118      	cbz	r0, 8002504 <__swsetup_r+0x14>
 80024fc:	6a03      	ldr	r3, [r0, #32]
 80024fe:	b90b      	cbnz	r3, 8002504 <__swsetup_r+0x14>
 8002500:	f7ff fee4 	bl	80022cc <__sinit>
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800250a:	0718      	lsls	r0, r3, #28
 800250c:	d422      	bmi.n	8002554 <__swsetup_r+0x64>
 800250e:	06d9      	lsls	r1, r3, #27
 8002510:	d407      	bmi.n	8002522 <__swsetup_r+0x32>
 8002512:	2309      	movs	r3, #9
 8002514:	602b      	str	r3, [r5, #0]
 8002516:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800251a:	81a3      	strh	r3, [r4, #12]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	e034      	b.n	800258c <__swsetup_r+0x9c>
 8002522:	0758      	lsls	r0, r3, #29
 8002524:	d512      	bpl.n	800254c <__swsetup_r+0x5c>
 8002526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002528:	b141      	cbz	r1, 800253c <__swsetup_r+0x4c>
 800252a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800252e:	4299      	cmp	r1, r3
 8002530:	d002      	beq.n	8002538 <__swsetup_r+0x48>
 8002532:	4628      	mov	r0, r5
 8002534:	f000 f8b0 	bl	8002698 <_free_r>
 8002538:	2300      	movs	r3, #0
 800253a:	6363      	str	r3, [r4, #52]	; 0x34
 800253c:	89a3      	ldrh	r3, [r4, #12]
 800253e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002542:	81a3      	strh	r3, [r4, #12]
 8002544:	2300      	movs	r3, #0
 8002546:	6063      	str	r3, [r4, #4]
 8002548:	6923      	ldr	r3, [r4, #16]
 800254a:	6023      	str	r3, [r4, #0]
 800254c:	89a3      	ldrh	r3, [r4, #12]
 800254e:	f043 0308 	orr.w	r3, r3, #8
 8002552:	81a3      	strh	r3, [r4, #12]
 8002554:	6923      	ldr	r3, [r4, #16]
 8002556:	b94b      	cbnz	r3, 800256c <__swsetup_r+0x7c>
 8002558:	89a3      	ldrh	r3, [r4, #12]
 800255a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800255e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002562:	d003      	beq.n	800256c <__swsetup_r+0x7c>
 8002564:	4621      	mov	r1, r4
 8002566:	4628      	mov	r0, r5
 8002568:	f000 fa62 	bl	8002a30 <__smakebuf_r>
 800256c:	89a0      	ldrh	r0, [r4, #12]
 800256e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002572:	f010 0301 	ands.w	r3, r0, #1
 8002576:	d00a      	beq.n	800258e <__swsetup_r+0x9e>
 8002578:	2300      	movs	r3, #0
 800257a:	60a3      	str	r3, [r4, #8]
 800257c:	6963      	ldr	r3, [r4, #20]
 800257e:	425b      	negs	r3, r3
 8002580:	61a3      	str	r3, [r4, #24]
 8002582:	6923      	ldr	r3, [r4, #16]
 8002584:	b943      	cbnz	r3, 8002598 <__swsetup_r+0xa8>
 8002586:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800258a:	d1c4      	bne.n	8002516 <__swsetup_r+0x26>
 800258c:	bd38      	pop	{r3, r4, r5, pc}
 800258e:	0781      	lsls	r1, r0, #30
 8002590:	bf58      	it	pl
 8002592:	6963      	ldrpl	r3, [r4, #20]
 8002594:	60a3      	str	r3, [r4, #8]
 8002596:	e7f4      	b.n	8002582 <__swsetup_r+0x92>
 8002598:	2000      	movs	r0, #0
 800259a:	e7f7      	b.n	800258c <__swsetup_r+0x9c>
 800259c:	20007948 	.word	0x20007948

080025a0 <memset>:
 80025a0:	4402      	add	r2, r0
 80025a2:	4603      	mov	r3, r0
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d100      	bne.n	80025aa <memset+0xa>
 80025a8:	4770      	bx	lr
 80025aa:	f803 1b01 	strb.w	r1, [r3], #1
 80025ae:	e7f9      	b.n	80025a4 <memset+0x4>

080025b0 <_close_r>:
 80025b0:	b538      	push	{r3, r4, r5, lr}
 80025b2:	4d06      	ldr	r5, [pc, #24]	; (80025cc <_close_r+0x1c>)
 80025b4:	2300      	movs	r3, #0
 80025b6:	4604      	mov	r4, r0
 80025b8:	4608      	mov	r0, r1
 80025ba:	602b      	str	r3, [r5, #0]
 80025bc:	f7fe fb13 	bl	8000be6 <_close>
 80025c0:	1c43      	adds	r3, r0, #1
 80025c2:	d102      	bne.n	80025ca <_close_r+0x1a>
 80025c4:	682b      	ldr	r3, [r5, #0]
 80025c6:	b103      	cbz	r3, 80025ca <_close_r+0x1a>
 80025c8:	6023      	str	r3, [r4, #0]
 80025ca:	bd38      	pop	{r3, r4, r5, pc}
 80025cc:	20007b04 	.word	0x20007b04

080025d0 <_lseek_r>:
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	4d07      	ldr	r5, [pc, #28]	; (80025f0 <_lseek_r+0x20>)
 80025d4:	4604      	mov	r4, r0
 80025d6:	4608      	mov	r0, r1
 80025d8:	4611      	mov	r1, r2
 80025da:	2200      	movs	r2, #0
 80025dc:	602a      	str	r2, [r5, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	f7fe fb28 	bl	8000c34 <_lseek>
 80025e4:	1c43      	adds	r3, r0, #1
 80025e6:	d102      	bne.n	80025ee <_lseek_r+0x1e>
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	b103      	cbz	r3, 80025ee <_lseek_r+0x1e>
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
 80025f0:	20007b04 	.word	0x20007b04

080025f4 <_read_r>:
 80025f4:	b538      	push	{r3, r4, r5, lr}
 80025f6:	4d07      	ldr	r5, [pc, #28]	; (8002614 <_read_r+0x20>)
 80025f8:	4604      	mov	r4, r0
 80025fa:	4608      	mov	r0, r1
 80025fc:	4611      	mov	r1, r2
 80025fe:	2200      	movs	r2, #0
 8002600:	602a      	str	r2, [r5, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	f7fe fab6 	bl	8000b74 <_read>
 8002608:	1c43      	adds	r3, r0, #1
 800260a:	d102      	bne.n	8002612 <_read_r+0x1e>
 800260c:	682b      	ldr	r3, [r5, #0]
 800260e:	b103      	cbz	r3, 8002612 <_read_r+0x1e>
 8002610:	6023      	str	r3, [r4, #0]
 8002612:	bd38      	pop	{r3, r4, r5, pc}
 8002614:	20007b04 	.word	0x20007b04

08002618 <_write_r>:
 8002618:	b538      	push	{r3, r4, r5, lr}
 800261a:	4d07      	ldr	r5, [pc, #28]	; (8002638 <_write_r+0x20>)
 800261c:	4604      	mov	r4, r0
 800261e:	4608      	mov	r0, r1
 8002620:	4611      	mov	r1, r2
 8002622:	2200      	movs	r2, #0
 8002624:	602a      	str	r2, [r5, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	f7fe fac1 	bl	8000bae <_write>
 800262c:	1c43      	adds	r3, r0, #1
 800262e:	d102      	bne.n	8002636 <_write_r+0x1e>
 8002630:	682b      	ldr	r3, [r5, #0]
 8002632:	b103      	cbz	r3, 8002636 <_write_r+0x1e>
 8002634:	6023      	str	r3, [r4, #0]
 8002636:	bd38      	pop	{r3, r4, r5, pc}
 8002638:	20007b04 	.word	0x20007b04

0800263c <__errno>:
 800263c:	4b01      	ldr	r3, [pc, #4]	; (8002644 <__errno+0x8>)
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20007948 	.word	0x20007948

08002648 <__libc_init_array>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	4d0d      	ldr	r5, [pc, #52]	; (8002680 <__libc_init_array+0x38>)
 800264c:	4c0d      	ldr	r4, [pc, #52]	; (8002684 <__libc_init_array+0x3c>)
 800264e:	1b64      	subs	r4, r4, r5
 8002650:	10a4      	asrs	r4, r4, #2
 8002652:	2600      	movs	r6, #0
 8002654:	42a6      	cmp	r6, r4
 8002656:	d109      	bne.n	800266c <__libc_init_array+0x24>
 8002658:	4d0b      	ldr	r5, [pc, #44]	; (8002688 <__libc_init_array+0x40>)
 800265a:	4c0c      	ldr	r4, [pc, #48]	; (800268c <__libc_init_array+0x44>)
 800265c:	f000 fa56 	bl	8002b0c <_init>
 8002660:	1b64      	subs	r4, r4, r5
 8002662:	10a4      	asrs	r4, r4, #2
 8002664:	2600      	movs	r6, #0
 8002666:	42a6      	cmp	r6, r4
 8002668:	d105      	bne.n	8002676 <__libc_init_array+0x2e>
 800266a:	bd70      	pop	{r4, r5, r6, pc}
 800266c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002670:	4798      	blx	r3
 8002672:	3601      	adds	r6, #1
 8002674:	e7ee      	b.n	8002654 <__libc_init_array+0xc>
 8002676:	f855 3b04 	ldr.w	r3, [r5], #4
 800267a:	4798      	blx	r3
 800267c:	3601      	adds	r6, #1
 800267e:	e7f2      	b.n	8002666 <__libc_init_array+0x1e>
 8002680:	08002bb0 	.word	0x08002bb0
 8002684:	08002bb0 	.word	0x08002bb0
 8002688:	08002bb0 	.word	0x08002bb0
 800268c:	08002bb4 	.word	0x08002bb4

08002690 <__retarget_lock_init_recursive>:
 8002690:	4770      	bx	lr

08002692 <__retarget_lock_acquire_recursive>:
 8002692:	4770      	bx	lr

08002694 <__retarget_lock_release_recursive>:
 8002694:	4770      	bx	lr
	...

08002698 <_free_r>:
 8002698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800269a:	2900      	cmp	r1, #0
 800269c:	d044      	beq.n	8002728 <_free_r+0x90>
 800269e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026a2:	9001      	str	r0, [sp, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f1a1 0404 	sub.w	r4, r1, #4
 80026aa:	bfb8      	it	lt
 80026ac:	18e4      	addlt	r4, r4, r3
 80026ae:	f000 f8df 	bl	8002870 <__malloc_lock>
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <_free_r+0x94>)
 80026b4:	9801      	ldr	r0, [sp, #4]
 80026b6:	6813      	ldr	r3, [r2, #0]
 80026b8:	b933      	cbnz	r3, 80026c8 <_free_r+0x30>
 80026ba:	6063      	str	r3, [r4, #4]
 80026bc:	6014      	str	r4, [r2, #0]
 80026be:	b003      	add	sp, #12
 80026c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80026c4:	f000 b8da 	b.w	800287c <__malloc_unlock>
 80026c8:	42a3      	cmp	r3, r4
 80026ca:	d908      	bls.n	80026de <_free_r+0x46>
 80026cc:	6825      	ldr	r5, [r4, #0]
 80026ce:	1961      	adds	r1, r4, r5
 80026d0:	428b      	cmp	r3, r1
 80026d2:	bf01      	itttt	eq
 80026d4:	6819      	ldreq	r1, [r3, #0]
 80026d6:	685b      	ldreq	r3, [r3, #4]
 80026d8:	1949      	addeq	r1, r1, r5
 80026da:	6021      	streq	r1, [r4, #0]
 80026dc:	e7ed      	b.n	80026ba <_free_r+0x22>
 80026de:	461a      	mov	r2, r3
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	b10b      	cbz	r3, 80026e8 <_free_r+0x50>
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	d9fa      	bls.n	80026de <_free_r+0x46>
 80026e8:	6811      	ldr	r1, [r2, #0]
 80026ea:	1855      	adds	r5, r2, r1
 80026ec:	42a5      	cmp	r5, r4
 80026ee:	d10b      	bne.n	8002708 <_free_r+0x70>
 80026f0:	6824      	ldr	r4, [r4, #0]
 80026f2:	4421      	add	r1, r4
 80026f4:	1854      	adds	r4, r2, r1
 80026f6:	42a3      	cmp	r3, r4
 80026f8:	6011      	str	r1, [r2, #0]
 80026fa:	d1e0      	bne.n	80026be <_free_r+0x26>
 80026fc:	681c      	ldr	r4, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	6053      	str	r3, [r2, #4]
 8002702:	440c      	add	r4, r1
 8002704:	6014      	str	r4, [r2, #0]
 8002706:	e7da      	b.n	80026be <_free_r+0x26>
 8002708:	d902      	bls.n	8002710 <_free_r+0x78>
 800270a:	230c      	movs	r3, #12
 800270c:	6003      	str	r3, [r0, #0]
 800270e:	e7d6      	b.n	80026be <_free_r+0x26>
 8002710:	6825      	ldr	r5, [r4, #0]
 8002712:	1961      	adds	r1, r4, r5
 8002714:	428b      	cmp	r3, r1
 8002716:	bf04      	itt	eq
 8002718:	6819      	ldreq	r1, [r3, #0]
 800271a:	685b      	ldreq	r3, [r3, #4]
 800271c:	6063      	str	r3, [r4, #4]
 800271e:	bf04      	itt	eq
 8002720:	1949      	addeq	r1, r1, r5
 8002722:	6021      	streq	r1, [r4, #0]
 8002724:	6054      	str	r4, [r2, #4]
 8002726:	e7ca      	b.n	80026be <_free_r+0x26>
 8002728:	b003      	add	sp, #12
 800272a:	bd30      	pop	{r4, r5, pc}
 800272c:	20007b0c 	.word	0x20007b0c

08002730 <sbrk_aligned>:
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	4e0e      	ldr	r6, [pc, #56]	; (800276c <sbrk_aligned+0x3c>)
 8002734:	460c      	mov	r4, r1
 8002736:	6831      	ldr	r1, [r6, #0]
 8002738:	4605      	mov	r5, r0
 800273a:	b911      	cbnz	r1, 8002742 <sbrk_aligned+0x12>
 800273c:	f000 f9d6 	bl	8002aec <_sbrk_r>
 8002740:	6030      	str	r0, [r6, #0]
 8002742:	4621      	mov	r1, r4
 8002744:	4628      	mov	r0, r5
 8002746:	f000 f9d1 	bl	8002aec <_sbrk_r>
 800274a:	1c43      	adds	r3, r0, #1
 800274c:	d00a      	beq.n	8002764 <sbrk_aligned+0x34>
 800274e:	1cc4      	adds	r4, r0, #3
 8002750:	f024 0403 	bic.w	r4, r4, #3
 8002754:	42a0      	cmp	r0, r4
 8002756:	d007      	beq.n	8002768 <sbrk_aligned+0x38>
 8002758:	1a21      	subs	r1, r4, r0
 800275a:	4628      	mov	r0, r5
 800275c:	f000 f9c6 	bl	8002aec <_sbrk_r>
 8002760:	3001      	adds	r0, #1
 8002762:	d101      	bne.n	8002768 <sbrk_aligned+0x38>
 8002764:	f04f 34ff 	mov.w	r4, #4294967295
 8002768:	4620      	mov	r0, r4
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	20007b10 	.word	0x20007b10

08002770 <_malloc_r>:
 8002770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002774:	1ccd      	adds	r5, r1, #3
 8002776:	f025 0503 	bic.w	r5, r5, #3
 800277a:	3508      	adds	r5, #8
 800277c:	2d0c      	cmp	r5, #12
 800277e:	bf38      	it	cc
 8002780:	250c      	movcc	r5, #12
 8002782:	2d00      	cmp	r5, #0
 8002784:	4607      	mov	r7, r0
 8002786:	db01      	blt.n	800278c <_malloc_r+0x1c>
 8002788:	42a9      	cmp	r1, r5
 800278a:	d905      	bls.n	8002798 <_malloc_r+0x28>
 800278c:	230c      	movs	r3, #12
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	2600      	movs	r6, #0
 8002792:	4630      	mov	r0, r6
 8002794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002798:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800286c <_malloc_r+0xfc>
 800279c:	f000 f868 	bl	8002870 <__malloc_lock>
 80027a0:	f8d8 3000 	ldr.w	r3, [r8]
 80027a4:	461c      	mov	r4, r3
 80027a6:	bb5c      	cbnz	r4, 8002800 <_malloc_r+0x90>
 80027a8:	4629      	mov	r1, r5
 80027aa:	4638      	mov	r0, r7
 80027ac:	f7ff ffc0 	bl	8002730 <sbrk_aligned>
 80027b0:	1c43      	adds	r3, r0, #1
 80027b2:	4604      	mov	r4, r0
 80027b4:	d155      	bne.n	8002862 <_malloc_r+0xf2>
 80027b6:	f8d8 4000 	ldr.w	r4, [r8]
 80027ba:	4626      	mov	r6, r4
 80027bc:	2e00      	cmp	r6, #0
 80027be:	d145      	bne.n	800284c <_malloc_r+0xdc>
 80027c0:	2c00      	cmp	r4, #0
 80027c2:	d048      	beq.n	8002856 <_malloc_r+0xe6>
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	4631      	mov	r1, r6
 80027c8:	4638      	mov	r0, r7
 80027ca:	eb04 0903 	add.w	r9, r4, r3
 80027ce:	f000 f98d 	bl	8002aec <_sbrk_r>
 80027d2:	4581      	cmp	r9, r0
 80027d4:	d13f      	bne.n	8002856 <_malloc_r+0xe6>
 80027d6:	6821      	ldr	r1, [r4, #0]
 80027d8:	1a6d      	subs	r5, r5, r1
 80027da:	4629      	mov	r1, r5
 80027dc:	4638      	mov	r0, r7
 80027de:	f7ff ffa7 	bl	8002730 <sbrk_aligned>
 80027e2:	3001      	adds	r0, #1
 80027e4:	d037      	beq.n	8002856 <_malloc_r+0xe6>
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	442b      	add	r3, r5
 80027ea:	6023      	str	r3, [r4, #0]
 80027ec:	f8d8 3000 	ldr.w	r3, [r8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d038      	beq.n	8002866 <_malloc_r+0xf6>
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	d12b      	bne.n	8002852 <_malloc_r+0xe2>
 80027fa:	2200      	movs	r2, #0
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	e00f      	b.n	8002820 <_malloc_r+0xb0>
 8002800:	6822      	ldr	r2, [r4, #0]
 8002802:	1b52      	subs	r2, r2, r5
 8002804:	d41f      	bmi.n	8002846 <_malloc_r+0xd6>
 8002806:	2a0b      	cmp	r2, #11
 8002808:	d917      	bls.n	800283a <_malloc_r+0xca>
 800280a:	1961      	adds	r1, r4, r5
 800280c:	42a3      	cmp	r3, r4
 800280e:	6025      	str	r5, [r4, #0]
 8002810:	bf18      	it	ne
 8002812:	6059      	strne	r1, [r3, #4]
 8002814:	6863      	ldr	r3, [r4, #4]
 8002816:	bf08      	it	eq
 8002818:	f8c8 1000 	streq.w	r1, [r8]
 800281c:	5162      	str	r2, [r4, r5]
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	4638      	mov	r0, r7
 8002822:	f104 060b 	add.w	r6, r4, #11
 8002826:	f000 f829 	bl	800287c <__malloc_unlock>
 800282a:	f026 0607 	bic.w	r6, r6, #7
 800282e:	1d23      	adds	r3, r4, #4
 8002830:	1af2      	subs	r2, r6, r3
 8002832:	d0ae      	beq.n	8002792 <_malloc_r+0x22>
 8002834:	1b9b      	subs	r3, r3, r6
 8002836:	50a3      	str	r3, [r4, r2]
 8002838:	e7ab      	b.n	8002792 <_malloc_r+0x22>
 800283a:	42a3      	cmp	r3, r4
 800283c:	6862      	ldr	r2, [r4, #4]
 800283e:	d1dd      	bne.n	80027fc <_malloc_r+0x8c>
 8002840:	f8c8 2000 	str.w	r2, [r8]
 8002844:	e7ec      	b.n	8002820 <_malloc_r+0xb0>
 8002846:	4623      	mov	r3, r4
 8002848:	6864      	ldr	r4, [r4, #4]
 800284a:	e7ac      	b.n	80027a6 <_malloc_r+0x36>
 800284c:	4634      	mov	r4, r6
 800284e:	6876      	ldr	r6, [r6, #4]
 8002850:	e7b4      	b.n	80027bc <_malloc_r+0x4c>
 8002852:	4613      	mov	r3, r2
 8002854:	e7cc      	b.n	80027f0 <_malloc_r+0x80>
 8002856:	230c      	movs	r3, #12
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4638      	mov	r0, r7
 800285c:	f000 f80e 	bl	800287c <__malloc_unlock>
 8002860:	e797      	b.n	8002792 <_malloc_r+0x22>
 8002862:	6025      	str	r5, [r4, #0]
 8002864:	e7dc      	b.n	8002820 <_malloc_r+0xb0>
 8002866:	605b      	str	r3, [r3, #4]
 8002868:	deff      	udf	#255	; 0xff
 800286a:	bf00      	nop
 800286c:	20007b0c 	.word	0x20007b0c

08002870 <__malloc_lock>:
 8002870:	4801      	ldr	r0, [pc, #4]	; (8002878 <__malloc_lock+0x8>)
 8002872:	f7ff bf0e 	b.w	8002692 <__retarget_lock_acquire_recursive>
 8002876:	bf00      	nop
 8002878:	20007b08 	.word	0x20007b08

0800287c <__malloc_unlock>:
 800287c:	4801      	ldr	r0, [pc, #4]	; (8002884 <__malloc_unlock+0x8>)
 800287e:	f7ff bf09 	b.w	8002694 <__retarget_lock_release_recursive>
 8002882:	bf00      	nop
 8002884:	20007b08 	.word	0x20007b08

08002888 <__sflush_r>:
 8002888:	898a      	ldrh	r2, [r1, #12]
 800288a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800288e:	4605      	mov	r5, r0
 8002890:	0710      	lsls	r0, r2, #28
 8002892:	460c      	mov	r4, r1
 8002894:	d458      	bmi.n	8002948 <__sflush_r+0xc0>
 8002896:	684b      	ldr	r3, [r1, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	dc05      	bgt.n	80028a8 <__sflush_r+0x20>
 800289c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	dc02      	bgt.n	80028a8 <__sflush_r+0x20>
 80028a2:	2000      	movs	r0, #0
 80028a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028aa:	2e00      	cmp	r6, #0
 80028ac:	d0f9      	beq.n	80028a2 <__sflush_r+0x1a>
 80028ae:	2300      	movs	r3, #0
 80028b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028b4:	682f      	ldr	r7, [r5, #0]
 80028b6:	6a21      	ldr	r1, [r4, #32]
 80028b8:	602b      	str	r3, [r5, #0]
 80028ba:	d032      	beq.n	8002922 <__sflush_r+0x9a>
 80028bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028be:	89a3      	ldrh	r3, [r4, #12]
 80028c0:	075a      	lsls	r2, r3, #29
 80028c2:	d505      	bpl.n	80028d0 <__sflush_r+0x48>
 80028c4:	6863      	ldr	r3, [r4, #4]
 80028c6:	1ac0      	subs	r0, r0, r3
 80028c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028ca:	b10b      	cbz	r3, 80028d0 <__sflush_r+0x48>
 80028cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028ce:	1ac0      	subs	r0, r0, r3
 80028d0:	2300      	movs	r3, #0
 80028d2:	4602      	mov	r2, r0
 80028d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028d6:	6a21      	ldr	r1, [r4, #32]
 80028d8:	4628      	mov	r0, r5
 80028da:	47b0      	blx	r6
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	89a3      	ldrh	r3, [r4, #12]
 80028e0:	d106      	bne.n	80028f0 <__sflush_r+0x68>
 80028e2:	6829      	ldr	r1, [r5, #0]
 80028e4:	291d      	cmp	r1, #29
 80028e6:	d82b      	bhi.n	8002940 <__sflush_r+0xb8>
 80028e8:	4a29      	ldr	r2, [pc, #164]	; (8002990 <__sflush_r+0x108>)
 80028ea:	410a      	asrs	r2, r1
 80028ec:	07d6      	lsls	r6, r2, #31
 80028ee:	d427      	bmi.n	8002940 <__sflush_r+0xb8>
 80028f0:	2200      	movs	r2, #0
 80028f2:	6062      	str	r2, [r4, #4]
 80028f4:	04d9      	lsls	r1, r3, #19
 80028f6:	6922      	ldr	r2, [r4, #16]
 80028f8:	6022      	str	r2, [r4, #0]
 80028fa:	d504      	bpl.n	8002906 <__sflush_r+0x7e>
 80028fc:	1c42      	adds	r2, r0, #1
 80028fe:	d101      	bne.n	8002904 <__sflush_r+0x7c>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	b903      	cbnz	r3, 8002906 <__sflush_r+0x7e>
 8002904:	6560      	str	r0, [r4, #84]	; 0x54
 8002906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002908:	602f      	str	r7, [r5, #0]
 800290a:	2900      	cmp	r1, #0
 800290c:	d0c9      	beq.n	80028a2 <__sflush_r+0x1a>
 800290e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002912:	4299      	cmp	r1, r3
 8002914:	d002      	beq.n	800291c <__sflush_r+0x94>
 8002916:	4628      	mov	r0, r5
 8002918:	f7ff febe 	bl	8002698 <_free_r>
 800291c:	2000      	movs	r0, #0
 800291e:	6360      	str	r0, [r4, #52]	; 0x34
 8002920:	e7c0      	b.n	80028a4 <__sflush_r+0x1c>
 8002922:	2301      	movs	r3, #1
 8002924:	4628      	mov	r0, r5
 8002926:	47b0      	blx	r6
 8002928:	1c41      	adds	r1, r0, #1
 800292a:	d1c8      	bne.n	80028be <__sflush_r+0x36>
 800292c:	682b      	ldr	r3, [r5, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0c5      	beq.n	80028be <__sflush_r+0x36>
 8002932:	2b1d      	cmp	r3, #29
 8002934:	d001      	beq.n	800293a <__sflush_r+0xb2>
 8002936:	2b16      	cmp	r3, #22
 8002938:	d101      	bne.n	800293e <__sflush_r+0xb6>
 800293a:	602f      	str	r7, [r5, #0]
 800293c:	e7b1      	b.n	80028a2 <__sflush_r+0x1a>
 800293e:	89a3      	ldrh	r3, [r4, #12]
 8002940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002944:	81a3      	strh	r3, [r4, #12]
 8002946:	e7ad      	b.n	80028a4 <__sflush_r+0x1c>
 8002948:	690f      	ldr	r7, [r1, #16]
 800294a:	2f00      	cmp	r7, #0
 800294c:	d0a9      	beq.n	80028a2 <__sflush_r+0x1a>
 800294e:	0793      	lsls	r3, r2, #30
 8002950:	680e      	ldr	r6, [r1, #0]
 8002952:	bf08      	it	eq
 8002954:	694b      	ldreq	r3, [r1, #20]
 8002956:	600f      	str	r7, [r1, #0]
 8002958:	bf18      	it	ne
 800295a:	2300      	movne	r3, #0
 800295c:	eba6 0807 	sub.w	r8, r6, r7
 8002960:	608b      	str	r3, [r1, #8]
 8002962:	f1b8 0f00 	cmp.w	r8, #0
 8002966:	dd9c      	ble.n	80028a2 <__sflush_r+0x1a>
 8002968:	6a21      	ldr	r1, [r4, #32]
 800296a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800296c:	4643      	mov	r3, r8
 800296e:	463a      	mov	r2, r7
 8002970:	4628      	mov	r0, r5
 8002972:	47b0      	blx	r6
 8002974:	2800      	cmp	r0, #0
 8002976:	dc06      	bgt.n	8002986 <__sflush_r+0xfe>
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800297e:	81a3      	strh	r3, [r4, #12]
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	e78e      	b.n	80028a4 <__sflush_r+0x1c>
 8002986:	4407      	add	r7, r0
 8002988:	eba8 0800 	sub.w	r8, r8, r0
 800298c:	e7e9      	b.n	8002962 <__sflush_r+0xda>
 800298e:	bf00      	nop
 8002990:	dfbffffe 	.word	0xdfbffffe

08002994 <_fflush_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	690b      	ldr	r3, [r1, #16]
 8002998:	4605      	mov	r5, r0
 800299a:	460c      	mov	r4, r1
 800299c:	b913      	cbnz	r3, 80029a4 <_fflush_r+0x10>
 800299e:	2500      	movs	r5, #0
 80029a0:	4628      	mov	r0, r5
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	b118      	cbz	r0, 80029ae <_fflush_r+0x1a>
 80029a6:	6a03      	ldr	r3, [r0, #32]
 80029a8:	b90b      	cbnz	r3, 80029ae <_fflush_r+0x1a>
 80029aa:	f7ff fc8f 	bl	80022cc <__sinit>
 80029ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f3      	beq.n	800299e <_fflush_r+0xa>
 80029b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029b8:	07d0      	lsls	r0, r2, #31
 80029ba:	d404      	bmi.n	80029c6 <_fflush_r+0x32>
 80029bc:	0599      	lsls	r1, r3, #22
 80029be:	d402      	bmi.n	80029c6 <_fflush_r+0x32>
 80029c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029c2:	f7ff fe66 	bl	8002692 <__retarget_lock_acquire_recursive>
 80029c6:	4628      	mov	r0, r5
 80029c8:	4621      	mov	r1, r4
 80029ca:	f7ff ff5d 	bl	8002888 <__sflush_r>
 80029ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029d0:	07da      	lsls	r2, r3, #31
 80029d2:	4605      	mov	r5, r0
 80029d4:	d4e4      	bmi.n	80029a0 <_fflush_r+0xc>
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	059b      	lsls	r3, r3, #22
 80029da:	d4e1      	bmi.n	80029a0 <_fflush_r+0xc>
 80029dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029de:	f7ff fe59 	bl	8002694 <__retarget_lock_release_recursive>
 80029e2:	e7dd      	b.n	80029a0 <_fflush_r+0xc>

080029e4 <__swhatbuf_r>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	460c      	mov	r4, r1
 80029e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ec:	2900      	cmp	r1, #0
 80029ee:	b096      	sub	sp, #88	; 0x58
 80029f0:	4615      	mov	r5, r2
 80029f2:	461e      	mov	r6, r3
 80029f4:	da0d      	bge.n	8002a12 <__swhatbuf_r+0x2e>
 80029f6:	89a3      	ldrh	r3, [r4, #12]
 80029f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	bf0c      	ite	eq
 8002a02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002a06:	2340      	movne	r3, #64	; 0x40
 8002a08:	2000      	movs	r0, #0
 8002a0a:	6031      	str	r1, [r6, #0]
 8002a0c:	602b      	str	r3, [r5, #0]
 8002a0e:	b016      	add	sp, #88	; 0x58
 8002a10:	bd70      	pop	{r4, r5, r6, pc}
 8002a12:	466a      	mov	r2, sp
 8002a14:	f000 f848 	bl	8002aa8 <_fstat_r>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	dbec      	blt.n	80029f6 <__swhatbuf_r+0x12>
 8002a1c:	9901      	ldr	r1, [sp, #4]
 8002a1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002a22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002a26:	4259      	negs	r1, r3
 8002a28:	4159      	adcs	r1, r3
 8002a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2e:	e7eb      	b.n	8002a08 <__swhatbuf_r+0x24>

08002a30 <__smakebuf_r>:
 8002a30:	898b      	ldrh	r3, [r1, #12]
 8002a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a34:	079d      	lsls	r5, r3, #30
 8002a36:	4606      	mov	r6, r0
 8002a38:	460c      	mov	r4, r1
 8002a3a:	d507      	bpl.n	8002a4c <__smakebuf_r+0x1c>
 8002a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	6123      	str	r3, [r4, #16]
 8002a44:	2301      	movs	r3, #1
 8002a46:	6163      	str	r3, [r4, #20]
 8002a48:	b002      	add	sp, #8
 8002a4a:	bd70      	pop	{r4, r5, r6, pc}
 8002a4c:	ab01      	add	r3, sp, #4
 8002a4e:	466a      	mov	r2, sp
 8002a50:	f7ff ffc8 	bl	80029e4 <__swhatbuf_r>
 8002a54:	9900      	ldr	r1, [sp, #0]
 8002a56:	4605      	mov	r5, r0
 8002a58:	4630      	mov	r0, r6
 8002a5a:	f7ff fe89 	bl	8002770 <_malloc_r>
 8002a5e:	b948      	cbnz	r0, 8002a74 <__smakebuf_r+0x44>
 8002a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a64:	059a      	lsls	r2, r3, #22
 8002a66:	d4ef      	bmi.n	8002a48 <__smakebuf_r+0x18>
 8002a68:	f023 0303 	bic.w	r3, r3, #3
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	81a3      	strh	r3, [r4, #12]
 8002a72:	e7e3      	b.n	8002a3c <__smakebuf_r+0xc>
 8002a74:	89a3      	ldrh	r3, [r4, #12]
 8002a76:	6020      	str	r0, [r4, #0]
 8002a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7c:	81a3      	strh	r3, [r4, #12]
 8002a7e:	9b00      	ldr	r3, [sp, #0]
 8002a80:	6163      	str	r3, [r4, #20]
 8002a82:	9b01      	ldr	r3, [sp, #4]
 8002a84:	6120      	str	r0, [r4, #16]
 8002a86:	b15b      	cbz	r3, 8002aa0 <__smakebuf_r+0x70>
 8002a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a8c:	4630      	mov	r0, r6
 8002a8e:	f000 f81d 	bl	8002acc <_isatty_r>
 8002a92:	b128      	cbz	r0, 8002aa0 <__smakebuf_r+0x70>
 8002a94:	89a3      	ldrh	r3, [r4, #12]
 8002a96:	f023 0303 	bic.w	r3, r3, #3
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	81a3      	strh	r3, [r4, #12]
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	431d      	orrs	r5, r3
 8002aa4:	81a5      	strh	r5, [r4, #12]
 8002aa6:	e7cf      	b.n	8002a48 <__smakebuf_r+0x18>

08002aa8 <_fstat_r>:
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	4d07      	ldr	r5, [pc, #28]	; (8002ac8 <_fstat_r+0x20>)
 8002aac:	2300      	movs	r3, #0
 8002aae:	4604      	mov	r4, r0
 8002ab0:	4608      	mov	r0, r1
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	602b      	str	r3, [r5, #0]
 8002ab6:	f7fe f8a2 	bl	8000bfe <_fstat>
 8002aba:	1c43      	adds	r3, r0, #1
 8002abc:	d102      	bne.n	8002ac4 <_fstat_r+0x1c>
 8002abe:	682b      	ldr	r3, [r5, #0]
 8002ac0:	b103      	cbz	r3, 8002ac4 <_fstat_r+0x1c>
 8002ac2:	6023      	str	r3, [r4, #0]
 8002ac4:	bd38      	pop	{r3, r4, r5, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20007b04 	.word	0x20007b04

08002acc <_isatty_r>:
 8002acc:	b538      	push	{r3, r4, r5, lr}
 8002ace:	4d06      	ldr	r5, [pc, #24]	; (8002ae8 <_isatty_r+0x1c>)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	602b      	str	r3, [r5, #0]
 8002ad8:	f7fe f8a1 	bl	8000c1e <_isatty>
 8002adc:	1c43      	adds	r3, r0, #1
 8002ade:	d102      	bne.n	8002ae6 <_isatty_r+0x1a>
 8002ae0:	682b      	ldr	r3, [r5, #0]
 8002ae2:	b103      	cbz	r3, 8002ae6 <_isatty_r+0x1a>
 8002ae4:	6023      	str	r3, [r4, #0]
 8002ae6:	bd38      	pop	{r3, r4, r5, pc}
 8002ae8:	20007b04 	.word	0x20007b04

08002aec <_sbrk_r>:
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	4d06      	ldr	r5, [pc, #24]	; (8002b08 <_sbrk_r+0x1c>)
 8002af0:	2300      	movs	r3, #0
 8002af2:	4604      	mov	r4, r0
 8002af4:	4608      	mov	r0, r1
 8002af6:	602b      	str	r3, [r5, #0]
 8002af8:	f7fe f8aa 	bl	8000c50 <_sbrk>
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	d102      	bne.n	8002b06 <_sbrk_r+0x1a>
 8002b00:	682b      	ldr	r3, [r5, #0]
 8002b02:	b103      	cbz	r3, 8002b06 <_sbrk_r+0x1a>
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
 8002b08:	20007b04 	.word	0x20007b04

08002b0c <_init>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr

08002b18 <_fini>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr
